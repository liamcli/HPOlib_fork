import numpy as np
import six
import csv
from HPOlib.benchmark_util import get_openml_dataset

def main():
    open_ml_ids= [3865, 3881, 3882, 3883, 3884, 3889, 3893, 3894, 3902, 3903, 3904, 3907, 3917, 3918, 3919, 3950, 3953,\
                  3954, 3962, 3964, 3968, 3972, 3973, 3976, 3980, 3995, 4000, 12, 14, 16, 2071, 2072, 2073, 2074, 2076, \
                  2077, 18, 21, 22, 23, 24, 26, 28, 3020, 3481, 30, 31, 32, 3505, 3506, 3507, 36, 3524, 3526, 3527, 3530, \
                  3533, 3, 3536, 43, 45, 58, 3574, 6, 3581, 3584, 3586, 3588, 3589, 3593, 3594, 3600, 3601, 3603, 3606, 3607,\
                  3609, 3617, 3618, 3627, 3638, 3662, 3664, 3668, 3671, 3672, 3678, 3681, 3684, 3686, 3687, 3688, 3698, 3702,\
                  3708, 3710, 3711, 3712, 3714, 3730, 3735, 3745, 3760, 3764, 3766, 3767, 3773, 3775, 3776, 3777, 3780, 3786,\
                  3793, 3797, 3816, 3821, 3822, 3825, 3829, 3834, 3839, 3840, 3841, 3842, 3843, 3854, 3856,3858]
    local_direcory = '/home/lisha/school/Data/openml'
    task_type=[]
    for tid in open_ml_ids:
        X,y = get_openml_dataset(tid, local_direcory)
        y = np.atleast_1d(y)
        if y.ndim == 1:
        # reshape is necessary to preserve the data contiguity against vs
        # [:, np.newaxis] that does not.
            y = np.reshape(y, (-1, 1))
        #X_train = X[:1000]
        #y_train = y[:1000]
        #X_test = X[1000:]
        #y_test = y[1000:]
        classes=[]
        if len(y.shape)==1:
            n_outputs = 1
        else:
            n_outputs = y.shape[1]
        for k in six.moves.range(n_outputs):
            classes_k, y[:, k] = np.unique(y[:, k], return_inverse=True)
            classes.append(classes_k)

        if n_outputs > 1:
            task = 'MULTILABEL_CLASSIFICATION'
        else:
            if len(classes[0]) == 2:
                task = 'BINARY_CLASSIFICATION'
            else:
                task = 'MULTICLASS_CLASSIFICATION'
        task_type.append([tid,task])
    myfile=open("task_types.csv",'wb')
    wr=csv.writer(myfile)
    for i in task_type:
        wr.writerow(i)
    myfile.close()
if __name__ == "__main__":
    main()